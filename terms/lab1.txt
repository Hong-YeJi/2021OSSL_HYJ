<C keywords>
# volatile
기본적으로 C/C++ 컴파일러는 비효율적이거나 불필요한 연산은 생략하고 코드를 최적화 시킨다. 그런데, 변수 앞에 volatile을 붙이면 컴파일러는 해당 변수를 최적화에서 제외하여 항상 메모리에 접근하도록 만든다.
# union
'공동으로 사용한다'라는 의미를 포함하고 있다. 구조체와 비슷하다. 정의 방법, 선언, 사용 방법이 모두 동일하며 키워드만 다를뿐이다. 구조체와의 차이는 메모리 공간을 공유한다는 점이다. 구조체는 멤버변수가 각각의 메모리 공간을 할당받고 있지만 union(공용체)는 같은 메모리공간을 모든 변수가 공유하는 union을 사용하는 이유는 메모리 절약을 위해서이다. 
# static
지역변수와 전역변수 둘의 성질을 같이 가지고 있다. static 변수는 지역변수처럼 선언된 함수내에서만 사용이 가능하며, 전역 변수처럼 프로그램이 종료될 때까지 메모리 공간에 존재하게 된다. 지역변수와는 달리 해당 함수가 반환을 하더라도 소멸되지 않는다. (함수가 끝나도 그 값을 기억하고 있을 수 있다.)
 다른 함수에서는 사용할 수는 없지만 해당 함수내에서는 static 변수는 프로그램이 종료되기 전까지 소멸되지 않는다. 즉, 함수 내부에서도 사용이 가능하고, 함수 외부에서도 사용이 가능하다. 또한, static 변수는 초기화 해주지 않아도, 자동으로 0으로 초기화가 된다.
# auto
auto는 지역변수에 붙일 수 있다. auto는 디폴트 값이기 때문에 변수를 선언할 때 자료형 앞에 생략되어 있다. 지역변수에만 사용이 되므로 함수 실행이 끝나면 사라진다.
ex) (auto) int a = 10;
# register
register도 지역변수에만 붙일 수 있다. 
register 변수를 사용하는 이유는 조금이라도 더 빠른 속도를 얻기 위해서이다. 대규모 루프를 돌린다거나 할 때 루프 제어 변수를 레지스터형으로 선언하면 이 변수의 일기, 증감 속도가 빨라지므로 전체 루프의 실행 속도가 빨라질 것이다. 
속도상의 차이 외에는 일반적인 지역변수와 다른 점이 전혀 없다. 
# unsigned
정수형의 양수 범위를 두 배로 늘리는 자료형이다. (0이상의 값으로만 표현)
음의 정수를 표현할 필요가 없다면, unsigned 선언은 변수 사용의 효용성을 높여준다.
# signed
일반적인 자료형에는 (signed)라는 기호가 암묵적으로 포함되어 있다.
-와 +숫자 모두 표현이 가능하다.
# enum
정수형 상수에 기호 이름을 부여하여 값을 지정한 자료형이다. enum 키워드를 사용하여 새로운 타입을 생성하고 그 타입에 값을 지정하는 것이다. 열거형은 프로그램의 가독성을 향상시키기 위해 사용한다.
# extern
외부에 있는 변수를 사용하기 위한 키워드이다.
외부(다른 소스 파일)에 선언된 변수를 사용하기 위해 extern 키워드를 이용해 외부 변수를 선언해준다. 변수를 초기화하지 않고 출력해도 다른 소스파일에서 초기화 된대로 출력이 된다.
goto
프로그램의 흐름을 원하는 위치로 이동 시킬 때 사용된다.

